version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name hatem-udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name hatem-udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        workflow_id:
          type: string
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl https://kvdb.io/S2wLLpoqSg7SZpN1V65i7Q/migration_<< parameters.workflow_id >>)
              if(( $SUCCESS==1 )); 
              then
              cd backend
              npm run migrations:revert
              fi
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            cp .env dist/.env
            pwd && ls -al
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
            - project/backend/node_modules
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          working_directory: ./frontend
          command: |
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend
          working_directory: ./backend
          command: |
            npm i
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          working_directory: ./frontend
          command: |
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          working_directory: ./backend
          command: |
            npm install
            npm install --save-dev webpack@5.74.0
            npm update path-parse --depth 3
            npm update mkdirp --depth 6
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=P3-udapeople-Hatem-back-end \
              --stack-name hatem-udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=P3-udapeople-Hatem-front-end \
              --stack-name hatem-udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: save the new back-end url to memory using kvdb.io
          command: |
            backend_url=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo ${backend_url}
            curl https://kvdb.io/S2wLLpoqSg7SZpN1V65i7Q/backend_url  -d "http://${backend_url}:3030"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      

  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
          environment:
            NODE_ENV: "local"
            VERSION: "1"
            ENVIRONMENT: "production"
            TYPEORM_CONNECTION: $TYPEORM_CONNECTION
            TYPEORM_HOST: $TYPEORM_HOST
            TYPEORM_USERNAME: $TYPEORM_USERNAME
            TYPEORM_PASSWORD: $TYPEORM_PASSWORD
            TYPEORM_DATABASE: $TYPEORM_DATABASE
            TYPEORM_PORT: $TYPEORM_PORT
            TYPEORM_ENTITIES: $TYPEORM_ENTITIES
      steps:
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
            fingerprints: ["31:25:4c:30:d0:8b:57:e5:52:7f:ac:37:64:3f:91:76"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              apk add curl
              apk add --upgrade bash
              apk add --update ansible
              apk add openssh-client
              pip3 install awscli
        - run:
            name: Configure server
            command: |
              cat ~/project/.circleci/ansible/inventory.txt
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
        # Here's where you will add some code to rollback on failure
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            pwd && ls -al
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            echo "has been executed successfully." > ./migrations_dump.txt
            pwd && ls -al
            if grep -q "has been executed successfully." ./migrations_dump.txt 
            then 
              curl https://kvdb.io/S2wLLpoqSg7SZpN1V65i7Q/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              curl https://kvdb.io/S2wLLpoqSg7SZpN1V65i7Q/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$( curl https://kvdb.io/S2wLLpoqSg7SZpN1V65i7Q/backend_url )
            echo $BACKEND_IP
            echo "${BACKEND_IP}"
            echo "NODE_ENV=production" >> frontend/.env
            echo "API_URL=${BACKEND_IP}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
            name: Install dependencies
            command: |
              sudo apt update
              sudo apt install openssh-server openssh-client
      - run:
          name: Install Ansible latest
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
            sudo apt install ansible -y
      - run:
          name: Install Node.js 
          command: |
            sudo apt update
            sudo apt install nodejs npm
            node --version 
      
      - add_ssh_keys:
          fingerprints: ["31:25:4c:30:d0:8b:57:e5:52:7f:ac:37:64:3f:91:76"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            ls
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            ls 
            pwd
            export API_URL=$( curl https://kvdb.io/S2wLLpoqSg7SZpN1V65i7Q/backend_url )
            echo $API_URL
            curl "$API_URL/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: clean old workflow
            command: |
              WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

              curl https://kvdb.io/S2wLLpoqSg7SZpN1V65i7Q/values/workflowid  -d "$WorkflowID"
        - run:
            name: Update cloudfront 
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --tags project=circleci-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-front" \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Remove old stacks and files
            command: |
              OldWorkflowID=$(curl https://kvdb.io/S2wLLpoqSg7SZpN1V65i7Q/values/workflowid)
              CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
              if [[ $OldWorkflowID == "" ]]
              then
              echo "No workflow id found"
              else
              if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
              then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              fi
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - notify : 
          requires: [build-frontend]
          context: slack
      - build-backend
      - notify : 
          requires: [build-backend]
          context: slack
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
  